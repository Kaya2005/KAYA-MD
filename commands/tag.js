const checkAdminOrOwner = require('../utils/checkAdmin');
const { contextInfo } = require('../utils/contextInfo'); // import centralis√©

module.exports = {
  name: 'tag',
  description: 'Mentionne tous les membres avec un message',
  category: 'Groupe',
  group: true,
  admin: true,

  run: async (kaya, m, msg, store, args) => {
    try {
      if (!m.isGroup) {
        return kaya.sendMessage(m.chat, {
          text: '‚ùå Cette commande fonctionne uniquement dans un groupe.',
          contextInfo
        }, { quoted: m });
      }

      const metadata = await kaya.groupMetadata(m.chat).catch(() => null);
      if (!metadata) {
        return kaya.sendMessage(m.chat, {
          text: '‚ùå Impossible de r√©cup√©rer les informations du groupe.',
          contextInfo
        }, { quoted: m });
      }

      // V√©rifie si l‚Äôutilisateur est admin ou owner
      const permissions = await checkAdminOrOwner(kaya, m.chat, m.sender);
      if (!permissions.isAdmin && !permissions.isOwner) {
        return kaya.sendMessage(m.chat, {
          text: 'üö´ Acc√®s refus√© : Seuls les admins ou owners peuvent utiliser cette commande.',
          contextInfo
        }, { quoted: m });
      }

      const members = metadata.participants.map(p => p.id);
      const message = m.quoted?.text || args.join(' ') || '_Aucun message fourni._';

      // ‚úÖ Message principal de tag envoy√© AVEC contextInfo
      await kaya.sendMessage(m.chat, {
        text: message,
        mentions: members,
        contextInfo
      }, { quoted: m });

    } catch (err) {
      console.error('Erreur commande tag :', err);
      await kaya.sendMessage(m.chat, {
        text: '‚ùå Une erreur est survenue lors de l‚Äôenvoi du tag.',
        contextInfo
      }, { quoted: m });
    }
  }
};