const fs = require('fs');
const path = require('path');
const config = require('../system/config');

const dataPath = path.join(__dirname, '../data/autoreact.json');
if (!fs.existsSync(dataPath)) fs.writeFileSync(dataPath, '{}');
const allEmojis = [
  'üòÄ','üòÅ','üòÇ','ü§£','üòÉ','üòÑ','üòÖ','üòÜ','üòâ','üòä','üòã','üòé','üòç','üòò','üòó','üòô','üòö','üôÇ','ü§ó','ü§©',
  'ü§î','ü§®','üòê','üòë','üò∂','üôÑ','üòè','üò£','üò•','üòÆ','ü§ê','üòØ','üò™','üò´','üò¥','üòå','üòõ','üòú','üòù','ü§§',
  'üòí','üòì','üòî','üòï','üôÉ','ü§ë','üò≤','‚òπÔ∏è','üôÅ','üòñ','üòû','üòü','üò§','üò¢','üò≠','üò¶','üòß','üò®','üò©','ü§Ø',
  'üò¨','üò∞','üò±','ü•µ','ü•∂','üò≥','ü§™','üòµ','üò°','üò†','ü§¨','üò∑','ü§í','ü§ï','ü§¢','ü§Æ','ü§ß','üòá','ü•≥','ü•∫',
  'ü§†','ü§°','ü§•','ü§´','ü§≠','ü´¢','ü´£','ü´°','üßê','ü§ì','üòà','üëø','üëπ','üë∫','üíÄ','üëª','üëΩ','ü§ñ','üí©','üôà'
];

module.exports = {
  name: 'autoreact',
  description: 'Active les r√©actions automatiques (owner uniquement)',
  category: 'r√©actions',

  run: async (kaya, m, msg, store, args) => {
    const sender = m.sender.replace(/\D/g, '');
    if (!config.owner.includes(sender)) {
      return kaya.sendMessage(m.chat, {
        text: '‚ùå Seul le propri√©taire peut utiliser cette commande.',
        contextInfo: {
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363402565816662@newsletter',
            newsletterName: 'KAYA MD',
            serverMessageId: 122
          }
        }
      }, { quoted: m });
    }

    const option = args[0]?.toLowerCase();

    if (!option) {
      return kaya.sendMessage(m.chat, {
        text: `
‚öôÔ∏è Commande AutoReact

Active ou d√©sactive les r√©actions automatiques.

Utilisation :
.autoreact all    ‚Üí R√©agit √† tous les messages

.autoreact group  ‚Üí R√©agit seulement dans les groupes

.autoreact inbox  ‚Üí R√©agit seulement dans les conversations priv√©es

.autoreact off    ‚Üí D√©sactive les r√©actions automatiques
        `.trim(),
        contextInfo: {
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363402565816662@newsletter',
            newsletterName: 'KAYA MD',
            serverMessageId: 122
          }
        }
      }, { quoted: m });
    }

    if (!['all', 'group', 'inbox', 'off'].includes(option)) {
      return kaya.sendMessage(m.chat, {
        text: '‚ùå Option inconnue. Tape `.autoreact` pour voir les options disponibles.',
        contextInfo: {
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363402565816662@newsletter',
            newsletterName: 'KAYA MD',
            serverMessageId: 122
          }
        }
      }, { quoted: m });
    }

    // Lecture ou cr√©ation du fichier autoData pour s'assurer qu'on modifie toujours la derni√®re version
    let autoData = {};
    try {
      autoData = JSON.parse(fs.readFileSync(dataPath));
    } catch {}

    if (option === 'off') {
      delete autoData.mode;
    } else {
      autoData.mode = option;
    }

    fs.writeFileSync(dataPath, JSON.stringify(autoData, null, 2));

    const status = autoData.mode
      ? `‚úÖ Auto-r√©action activ√©e : *${autoData.mode.toUpperCase()}*`
      : '‚ùå Auto-r√©action d√©sactiv√©e.';

    return kaya.sendMessage(m.chat, {
      text:
`‚ï≠‚îÅ‚îÅ„Äî ‚öôÔ∏è KAYA-MD AUTO-REACT „Äï‚îÅ‚îÅ‚¨£
‚îú üëë Propri√©taire : ${sender}
‚îú üîÑ Mode s√©lectionn√© : *${option.toUpperCase()}*
‚îú üé≠ R√©actions vari√©es sur chaque message
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚¨£

${status}`,
      contextInfo: {
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363402565816662@newsletter',
          newsletterName: 'KAYA MD',
          serverMessageId: 122
        }
      }
    }, { quoted: m });
  },

  onMessage: async (kaya, m) => {
    let autoData = {};
    try {
      autoData = JSON.parse(fs.readFileSync(dataPath));
    } catch {}

    const { mode } = autoData;
    if (!mode) return;

    const emoji = allEmojis[Math.floor(Math.random() * allEmojis.length)];
    const isGroup = m.key.remoteJid.endsWith('@g.us');

    if (
      (mode === 'group' && isGroup) ||
      (mode === 'inbox' && !isGroup) ||
      (mode === 'all')
    ) {
      try {
        await kaya.sendMessage(m.chat, {
          react: {
            text: emoji,
            key: m.key
          }
        });
      } catch (err) {
        console.log('‚ùå Erreur auto reaction :', err.message);
      }
    }
  }
};