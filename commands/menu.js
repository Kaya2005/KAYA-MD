const fs = require('fs');
const path = require('path');
const { contextInfo } = require('../utils/contextInfo'); // import centralisÃ©

const botImagePath = path.join(__dirname, '../data/botImage.json');

module.exports = {
  name: 'menu',
  description: 'Affiche le menu interactif Kaya-MD',
  run: async (kaya, m, msg, store, args) => {
    // Date & Heure en format FR
    const now = new Date();
    const date = now.toLocaleDateString('fr-FR');
    const time = now.toLocaleTimeString('fr-FR');

    // Nombre total de commandes
    let totalCmds = 0;
    try {
      const commandFiles = fs.readdirSync(path.join(__dirname, '../commands')).filter(file => file.endsWith('.js'));
      totalCmds = commandFiles.length;
    } catch (e) {
      totalCmds = 'Erreur';
    }

    // Chargement de lâ€™image du bot dynamique
    let botImageUrl = 'https://files.catbox.moe/ya7puq.jpg'; // Image par dÃ©faut
    try {
      if (fs.existsSync(botImagePath)) {
        const data = JSON.parse(fs.readFileSync(botImagePath));
        if (data.botImage) botImageUrl = data.botImage;
      }
    } catch (e) {
      console.error('Erreur lors du chargement de lâ€™image du bot:', e);
    }

    const menuText = `
â•­â”€â”€â”€â”€KAYA-MD MENUâ”€â”€â”€â•®
â”‚ ðŸ“… *Date* : ${date}
â”‚ ðŸ•’ *Heure* : ${time}
â”‚ ðŸ“‚ *Commandes* : ${totalCmds}
â”‚
â”‚ ðŸ”¹ 1. Groupe menu
â”‚ ðŸ”¹ 2. Owner menu
â”‚ ðŸ”¹ 3. Stickers menu
â”‚ ðŸ”¹ 4. Divers menu
â”‚ ðŸ”¹ 5. TÃ©lÃ©chargements menu
â”‚ ðŸ”¹ 6. IA & Outils menu
â”‚ ðŸ”¹ 7. Tous les menus
â”‚      
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
ðŸ“‹ *Astuce :* RÃ©ponds au menu avec un chiffre (1 Ã  7) ou 
               tape .groupemenu | stickermenu etc..
    `.trim();

    await kaya.sendMessage(
      m.chat,
      {
        image: { url: botImageUrl },
        caption: menuText,
        contextInfo: { ...contextInfo, mentionedJid: [m.sender] } // utilisation centralisÃ©e
      },
      { quoted: m }
    );

    // Active le menu de maniÃ¨re permanente
    global.menuState = global.menuState || {};
    global.menuState[m.sender] = true;
  }
};
